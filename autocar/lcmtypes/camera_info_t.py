"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import lcmtypes.camera_object_t

import lcmtypes.camera_center_line_info_t

import lcmtypes.camera_line_info_t

class camera_info_t(object):
    __slots__ = ["utime", "change_lane", "lane_width", "center_line", "lines", "object_count", "objects"]

    def __init__(self):
        self.utime = 0
        self.change_lane = 0
        self.lane_width = 0.0
        self.center_line = lcmtypes.camera_center_line_info_t()
        self.lines = [ lcmtypes.camera_line_info_t() for dim0 in range(4) ]
        self.object_count = 0
        self.objects = []

    def encode(self):
        buf = BytesIO()
        buf.write(camera_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qBf", self.utime, self.change_lane, self.lane_width))
        assert self.center_line._get_packed_fingerprint() == lcmtypes.camera_center_line_info_t._get_packed_fingerprint()
        self.center_line._encode_one(buf)
        for i0 in range(4):
            assert self.lines[i0]._get_packed_fingerprint() == lcmtypes.camera_line_info_t._get_packed_fingerprint()
            self.lines[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.object_count))
        for i0 in range(self.object_count):
            assert self.objects[i0]._get_packed_fingerprint() == lcmtypes.camera_object_t._get_packed_fingerprint()
            self.objects[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != camera_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return camera_info_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = camera_info_t()
        self.utime, self.change_lane, self.lane_width = struct.unpack(">qBf", buf.read(13))
        self.center_line = lcmtypes.camera_center_line_info_t._decode_one(buf)
        self.lines = []
        for i0 in range(4):
            self.lines.append(lcmtypes.camera_line_info_t._decode_one(buf))
        self.object_count = struct.unpack(">h", buf.read(2))[0]
        self.objects = []
        for i0 in range(self.object_count):
            self.objects.append(lcmtypes.camera_object_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if camera_info_t in parents: return 0
        newparents = parents + [camera_info_t]
        tmphash = (0x9b4a21eef809d38c+ lcmtypes.camera_center_line_info_t._get_hash_recursive(newparents)+ lcmtypes.camera_line_info_t._get_hash_recursive(newparents)+ lcmtypes.camera_object_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if camera_info_t._packed_fingerprint is None:
            camera_info_t._packed_fingerprint = struct.pack(">Q", camera_info_t._get_hash_recursive([]))
        return camera_info_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

