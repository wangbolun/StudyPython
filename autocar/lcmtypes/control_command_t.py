"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class control_command_t(object):
    __slots__ = ["utime", "throttle", "brake", "steeringRate", "steeringTarget", "speed", "acceleration", "engineOnOff", "leftTurn", "rightTurn", "horn", "parkingBrake", "resetModel", "drivingMode", "gearLocation"]

    def __init__(self):
        self.utime = 0
        self.throttle = 0.0
        self.brake = 0.0
        self.steeringRate = 0.0
        self.steeringTarget = 0.0
        self.speed = 0.0
        self.acceleration = 0.0
        self.engineOnOff = False
        self.leftTurn = False
        self.rightTurn = False
        self.horn = False
        self.parkingBrake = False
        self.resetModel = False
        self.drivingMode = 0
        self.gearLocation = 0

    def encode(self):
        buf = BytesIO()
        buf.write(control_command_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qddddddbbbbbbhh", self.utime, self.throttle, self.brake, self.steeringRate, self.steeringTarget, self.speed, self.acceleration, self.engineOnOff, self.leftTurn, self.rightTurn, self.horn, self.parkingBrake, self.resetModel, self.drivingMode, self.gearLocation))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != control_command_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return control_command_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = control_command_t()
        self.utime, self.throttle, self.brake, self.steeringRate, self.steeringTarget, self.speed, self.acceleration = struct.unpack(">qdddddd", buf.read(56))
        self.engineOnOff = bool(struct.unpack('b', buf.read(1))[0])
        self.leftTurn = bool(struct.unpack('b', buf.read(1))[0])
        self.rightTurn = bool(struct.unpack('b', buf.read(1))[0])
        self.horn = bool(struct.unpack('b', buf.read(1))[0])
        self.parkingBrake = bool(struct.unpack('b', buf.read(1))[0])
        self.resetModel = bool(struct.unpack('b', buf.read(1))[0])
        self.drivingMode, self.gearLocation = struct.unpack(">hh", buf.read(4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if control_command_t in parents: return 0
        tmphash = (0x5589520060d041da) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if control_command_t._packed_fingerprint is None:
            control_command_t._packed_fingerprint = struct.pack(">Q", control_command_t._get_hash_recursive([]))
        return control_command_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

