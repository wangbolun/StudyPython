"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class pad_control_info_t(object):
    __slots__ = ["esr_onoff", "lux40_onoff", "gps_onoff", "speed_updown", "lane_change", "drive_mode", "work_onoff", "cancel", "follow_past"]

    def __init__(self):
        self.esr_onoff = 0
        self.lux40_onoff = 0
        self.gps_onoff = 0
        self.speed_updown = 0
        self.lane_change = 0
        self.drive_mode = 0
        self.work_onoff = 0
        self.cancel = 0
        self.follow_past = 0

    def encode(self):
        buf = BytesIO()
        buf.write(pad_control_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">BBBBBBBBB", self.esr_onoff, self.lux40_onoff, self.gps_onoff, self.speed_updown, self.lane_change, self.drive_mode, self.work_onoff, self.cancel, self.follow_past))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pad_control_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pad_control_info_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pad_control_info_t()
        self.esr_onoff, self.lux40_onoff, self.gps_onoff, self.speed_updown, self.lane_change, self.drive_mode, self.work_onoff, self.cancel, self.follow_past = struct.unpack(">BBBBBBBBB", buf.read(9))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pad_control_info_t in parents: return 0
        tmphash = (0x9c74d7d1e17163fb) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pad_control_info_t._packed_fingerprint is None:
            pad_control_info_t._packed_fingerprint = struct.pack(">Q", pad_control_info_t._get_hash_recursive([]))
        return pad_control_info_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

