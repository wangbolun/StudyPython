"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import lcmtypes.map_point_t

class map_lane_info_t(object):
    __slots__ = ["index", "property", "width", "pointCount", "points"]

    def __init__(self):
        self.index = 0
        self.property = 0
        self.width = 0.0
        self.pointCount = 0
        self.points = []

    def encode(self):
        buf = BytesIO()
        buf.write(map_lane_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbfh", self.index, self.property, self.width, self.pointCount))
        for i0 in range(self.pointCount):
            assert self.points[i0]._get_packed_fingerprint() == lcmtypes.map_point_t._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != map_lane_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return map_lane_info_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = map_lane_info_t()
        self.index, self.property, self.width, self.pointCount = struct.unpack(">bbfh", buf.read(8))
        self.points = []
        for i0 in range(self.pointCount):
            self.points.append(lcmtypes.map_point_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if map_lane_info_t in parents: return 0
        newparents = parents + [map_lane_info_t]
        tmphash = (0x39fbbe3f30db64e3+ lcmtypes.map_point_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if map_lane_info_t._packed_fingerprint is None:
            map_lane_info_t._packed_fingerprint = struct.pack(">Q", map_lane_info_t._get_hash_recursive([]))
        return map_lane_info_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

