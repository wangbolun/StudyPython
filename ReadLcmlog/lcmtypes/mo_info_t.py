"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import lcmtypes.mo_line_info_t

import lcmtypes.mo_paras_info_t

import lcmtypes.mo_radarpoint_info_t

import lcmtypes.img_line_info_t

import lcmtypes.img_object_info_t

import lcmtypes.mo_guardrail_info_t

import lcmtypes.mo_object_info_t

import lcmtypes.img_guardrail_info_t

import lcmtypes.mo_controluidata_info_t

class mo_info_t(object):
    __slots__ = ["nFrameID", "radarinfo", "nLaneNum", "lines", "curb", "guardrail", "nObjNum", "objects", "dangerousObjNum", "dangerousObjects", "BoundaryInfo", "imgLaneNum", "imgLines", "imgCurb", "imgGuardrail", "imgObjNum", "imgObjects", "imgDangerousObjNum", "imgDangerousObjects", "controluidata", "cameraParas"]

    def __init__(self):
        self.nFrameID = 0
        self.radarinfo = [ lcmtypes.mo_radarpoint_info_t() for dim0 in range(101) ]
        self.nLaneNum = 0
        self.lines = [ lcmtypes.mo_line_info_t() for dim0 in range(8) ]
        self.curb = lcmtypes.mo_guardrail_info_t()
        self.guardrail = lcmtypes.mo_guardrail_info_t()
        self.nObjNum = 0
        self.objects = [ lcmtypes.mo_object_info_t() for dim0 in range(100) ]
        self.dangerousObjNum = 0
        self.dangerousObjects = [ lcmtypes.mo_object_info_t() for dim0 in range(100) ]
        self.BoundaryInfo = [ 0 for dim0 in range(1280) ]
        self.imgLaneNum = 0
        self.imgLines = [ lcmtypes.img_line_info_t() for dim0 in range(8) ]
        self.imgCurb = lcmtypes.img_guardrail_info_t()
        self.imgGuardrail = lcmtypes.img_guardrail_info_t()
        self.imgObjNum = 0
        self.imgObjects = [ lcmtypes.img_object_info_t() for dim0 in range(100) ]
        self.imgDangerousObjNum = 0
        self.imgDangerousObjects = [ lcmtypes.img_object_info_t() for dim0 in range(100) ]
        self.controluidata = lcmtypes.mo_controluidata_info_t()
        self.cameraParas = lcmtypes.mo_paras_info_t()

    def encode(self):
        buf = BytesIO()
        buf.write(mo_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.nFrameID))
        for i0 in range(101):
            assert self.radarinfo[i0]._get_packed_fingerprint() == lcmtypes.mo_radarpoint_info_t._get_packed_fingerprint()
            self.radarinfo[i0]._encode_one(buf)
        buf.write(struct.pack(">b", self.nLaneNum))
        for i0 in range(8):
            assert self.lines[i0]._get_packed_fingerprint() == lcmtypes.mo_line_info_t._get_packed_fingerprint()
            self.lines[i0]._encode_one(buf)
        assert self.curb._get_packed_fingerprint() == lcmtypes.mo_guardrail_info_t._get_packed_fingerprint()
        self.curb._encode_one(buf)
        assert self.guardrail._get_packed_fingerprint() == lcmtypes.mo_guardrail_info_t._get_packed_fingerprint()
        self.guardrail._encode_one(buf)
        buf.write(struct.pack(">b", self.nObjNum))
        for i0 in range(100):
            assert self.objects[i0]._get_packed_fingerprint() == lcmtypes.mo_object_info_t._get_packed_fingerprint()
            self.objects[i0]._encode_one(buf)
        buf.write(struct.pack(">b", self.dangerousObjNum))
        for i0 in range(100):
            assert self.dangerousObjects[i0]._get_packed_fingerprint() == lcmtypes.mo_object_info_t._get_packed_fingerprint()
            self.dangerousObjects[i0]._encode_one(buf)
        buf.write(struct.pack('>1280h', *self.BoundaryInfo[:1280]))
        buf.write(struct.pack(">b", self.imgLaneNum))
        for i0 in range(8):
            assert self.imgLines[i0]._get_packed_fingerprint() == lcmtypes.img_line_info_t._get_packed_fingerprint()
            self.imgLines[i0]._encode_one(buf)
        assert self.imgCurb._get_packed_fingerprint() == lcmtypes.img_guardrail_info_t._get_packed_fingerprint()
        self.imgCurb._encode_one(buf)
        assert self.imgGuardrail._get_packed_fingerprint() == lcmtypes.img_guardrail_info_t._get_packed_fingerprint()
        self.imgGuardrail._encode_one(buf)
        buf.write(struct.pack(">b", self.imgObjNum))
        for i0 in range(100):
            assert self.imgObjects[i0]._get_packed_fingerprint() == lcmtypes.img_object_info_t._get_packed_fingerprint()
            self.imgObjects[i0]._encode_one(buf)
        buf.write(struct.pack(">b", self.imgDangerousObjNum))
        for i0 in range(100):
            assert self.imgDangerousObjects[i0]._get_packed_fingerprint() == lcmtypes.img_object_info_t._get_packed_fingerprint()
            self.imgDangerousObjects[i0]._encode_one(buf)
        assert self.controluidata._get_packed_fingerprint() == lcmtypes.mo_controluidata_info_t._get_packed_fingerprint()
        self.controluidata._encode_one(buf)
        assert self.cameraParas._get_packed_fingerprint() == lcmtypes.mo_paras_info_t._get_packed_fingerprint()
        self.cameraParas._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mo_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mo_info_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mo_info_t()
        self.nFrameID = struct.unpack(">i", buf.read(4))[0]
        self.radarinfo = []
        for i0 in range(101):
            self.radarinfo.append(lcmtypes.mo_radarpoint_info_t._decode_one(buf))
        self.nLaneNum = struct.unpack(">b", buf.read(1))[0]
        self.lines = []
        for i0 in range(8):
            self.lines.append(lcmtypes.mo_line_info_t._decode_one(buf))
        self.curb = lcmtypes.mo_guardrail_info_t._decode_one(buf)
        self.guardrail = lcmtypes.mo_guardrail_info_t._decode_one(buf)
        self.nObjNum = struct.unpack(">b", buf.read(1))[0]
        self.objects = []
        for i0 in range(100):
            self.objects.append(lcmtypes.mo_object_info_t._decode_one(buf))
        self.dangerousObjNum = struct.unpack(">b", buf.read(1))[0]
        self.dangerousObjects = []
        for i0 in range(100):
            self.dangerousObjects.append(lcmtypes.mo_object_info_t._decode_one(buf))
        self.BoundaryInfo = struct.unpack('>1280h', buf.read(2560))
        self.imgLaneNum = struct.unpack(">b", buf.read(1))[0]
        self.imgLines = []
        for i0 in range(8):
            self.imgLines.append(lcmtypes.img_line_info_t._decode_one(buf))
        self.imgCurb = lcmtypes.img_guardrail_info_t._decode_one(buf)
        self.imgGuardrail = lcmtypes.img_guardrail_info_t._decode_one(buf)
        self.imgObjNum = struct.unpack(">b", buf.read(1))[0]
        self.imgObjects = []
        for i0 in range(100):
            self.imgObjects.append(lcmtypes.img_object_info_t._decode_one(buf))
        self.imgDangerousObjNum = struct.unpack(">b", buf.read(1))[0]
        self.imgDangerousObjects = []
        for i0 in range(100):
            self.imgDangerousObjects.append(lcmtypes.img_object_info_t._decode_one(buf))
        self.controluidata = lcmtypes.mo_controluidata_info_t._decode_one(buf)
        self.cameraParas = lcmtypes.mo_paras_info_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if mo_info_t in parents: return 0
        newparents = parents + [mo_info_t]
        tmphash = (0x964286a42b08aa3e+ lcmtypes.mo_radarpoint_info_t._get_hash_recursive(newparents)+ lcmtypes.mo_line_info_t._get_hash_recursive(newparents)+ lcmtypes.mo_guardrail_info_t._get_hash_recursive(newparents)+ lcmtypes.mo_guardrail_info_t._get_hash_recursive(newparents)+ lcmtypes.mo_object_info_t._get_hash_recursive(newparents)+ lcmtypes.mo_object_info_t._get_hash_recursive(newparents)+ lcmtypes.img_line_info_t._get_hash_recursive(newparents)+ lcmtypes.img_guardrail_info_t._get_hash_recursive(newparents)+ lcmtypes.img_guardrail_info_t._get_hash_recursive(newparents)+ lcmtypes.img_object_info_t._get_hash_recursive(newparents)+ lcmtypes.img_object_info_t._get_hash_recursive(newparents)+ lcmtypes.mo_controluidata_info_t._get_hash_recursive(newparents)+ lcmtypes.mo_paras_info_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mo_info_t._packed_fingerprint is None:
            mo_info_t._packed_fingerprint = struct.pack(">Q", mo_info_t._get_hash_recursive([]))
        return mo_info_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

