"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class image_fragment_t(object):
    __slots__ = ["utime", "fragment_count", "fragment_index", "width", "height", "stride", "pixelformat", "imageSize", "fragmentSize", "image"]

    def __init__(self):
        self.utime = 0
        self.fragment_count = 0
        self.fragment_index = 0
        self.width = 0
        self.height = 0
        self.stride = 0
        self.pixelformat = 0
        self.imageSize = 0
        self.fragmentSize = 0
        self.image = ""

    def encode(self):
        buf = BytesIO()
        buf.write(image_fragment_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qhhhhhiii", self.utime, self.fragment_count, self.fragment_index, self.width, self.height, self.stride, self.pixelformat, self.imageSize, self.fragmentSize))
        buf.write(bytearray(self.image[:self.fragmentSize]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != image_fragment_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return image_fragment_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = image_fragment_t()
        self.utime, self.fragment_count, self.fragment_index, self.width, self.height, self.stride, self.pixelformat, self.imageSize, self.fragmentSize = struct.unpack(">qhhhhhiii", buf.read(30))
        self.image = buf.read(self.fragmentSize)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if image_fragment_t in parents: return 0
        tmphash = (0x594244a78eb65bad) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if image_fragment_t._packed_fingerprint is None:
            image_fragment_t._packed_fingerprint = struct.pack(">Q", image_fragment_t._get_hash_recursive([]))
        return image_fragment_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

