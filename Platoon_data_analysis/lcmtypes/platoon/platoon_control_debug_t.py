"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class platoon_control_debug_t(object):
    __slots__ = ["utime", "autodrive_mode", "control_mode", "vehicle_index", "collision_time", "pid_p_gain", "pid_i_gain", "pid_d_gain", "throttle_gain", "brake_gain", "throttle_command", "brake_command", "input_command", "acceleration_ego", "acceleration_front", "acceleration_lead", "acceleration_target", "speed_ego", "speed_target", "speed_front", "speed_lead", "speed_front_error", "speed_lead_error", "spacing_target", "spacing_current", "spacing_error", "C1", "xi", "wn", "g0", "g1", "g2", "g3", "g4"]

    def __init__(self):
        self.utime = 0
        self.autodrive_mode = 0
        self.control_mode = 0.0
        self.vehicle_index = 0
        self.collision_time = 0.0
        self.pid_p_gain = 0.0
        self.pid_i_gain = 0.0
        self.pid_d_gain = 0.0
        self.throttle_gain = 0.0
        self.brake_gain = 0.0
        self.throttle_command = 0.0
        self.brake_command = 0.0
        self.input_command = 0.0
        self.acceleration_ego = 0.0
        self.acceleration_front = 0.0
        self.acceleration_lead = 0.0
        self.acceleration_target = 0.0
        self.speed_ego = 0.0
        self.speed_target = 0.0
        self.speed_front = 0.0
        self.speed_lead = 0.0
        self.speed_front_error = 0.0
        self.speed_lead_error = 0.0
        self.spacing_target = 0.0
        self.spacing_current = 0.0
        self.spacing_error = 0.0
        self.C1 = 0.0
        self.xi = 0.0
        self.wn = 0.0
        self.g0 = 0.0
        self.g1 = 0.0
        self.g2 = 0.0
        self.g3 = 0.0
        self.g4 = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(platoon_control_debug_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qhfhffffffffffffffffffffffffffffff", self.utime, self.autodrive_mode, self.control_mode, self.vehicle_index, self.collision_time, self.pid_p_gain, self.pid_i_gain, self.pid_d_gain, self.throttle_gain, self.brake_gain, self.throttle_command, self.brake_command, self.input_command, self.acceleration_ego, self.acceleration_front, self.acceleration_lead, self.acceleration_target, self.speed_ego, self.speed_target, self.speed_front, self.speed_lead, self.speed_front_error, self.speed_lead_error, self.spacing_target, self.spacing_current, self.spacing_error, self.C1, self.xi, self.wn, self.g0, self.g1, self.g2, self.g3, self.g4))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != platoon_control_debug_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return platoon_control_debug_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = platoon_control_debug_t()
        self.utime, self.autodrive_mode, self.control_mode, self.vehicle_index, self.collision_time, self.pid_p_gain, self.pid_i_gain, self.pid_d_gain, self.throttle_gain, self.brake_gain, self.throttle_command, self.brake_command, self.input_command, self.acceleration_ego, self.acceleration_front, self.acceleration_lead, self.acceleration_target, self.speed_ego, self.speed_target, self.speed_front, self.speed_lead, self.speed_front_error, self.speed_lead_error, self.spacing_target, self.spacing_current, self.spacing_error, self.C1, self.xi, self.wn, self.g0, self.g1, self.g2, self.g3, self.g4 = struct.unpack(">qhfhffffffffffffffffffffffffffffff", buf.read(136))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if platoon_control_debug_t in parents: return 0
        tmphash = (0xaa21a334ee3b2ab8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if platoon_control_debug_t._packed_fingerprint is None:
            platoon_control_debug_t._packed_fingerprint = struct.pack(">Q", platoon_control_debug_t._get_hash_recursive([]))
        return platoon_control_debug_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

