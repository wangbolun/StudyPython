"""
============================
author:wbl
time:2020/3/2
E-mail:540453724@qq.com
============================
"""
"""
自动驾驶里程计，通过轮速计算，放置在车上。
"""

import lcm
import time

b = 1
square = []

"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct


class vehicle_status_t(object):
    __slots__ = ["utime", "nauto", "steerPos", "steerSpe", "light", "speLeft", "speRight", "vot", "shift", "disLeft",
                 "disRight", "speo", "yawRate", "accelerationLon", "accelerationLat"]

    def __init__(self):
        self.utime = 0
        self.nauto = 0
        self.steerPos = 0.0
        self.steerSpe = 0
        self.light = 0
        self.speLeft = 0.0
        self.speRight = 0.0
        self.vot = 0.0
        self.shift = 0
        self.disLeft = 0.0
        self.disRight = 0.0
        self.speo = 0.0
        self.yawRate = 0.0
        self.accelerationLon = 0.0
        self.accelerationLat = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(vehicle_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qifiifffiffffff", self.utime, self.nauto, self.steerPos, self.steerSpe, self.light,
                              self.speLeft, self.speRight, self.vot, self.shift, self.disLeft, self.disRight, self.speo,
                              self.yawRate, self.accelerationLon, self.accelerationLat))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != vehicle_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return vehicle_status_t._decode_one(buf)

    decode = staticmethod(decode)

    def _decode_one(buf):
        self = vehicle_status_t()
        self.utime, self.nauto, self.steerPos, self.steerSpe, self.light, self.speLeft, self.speRight, self.vot, self.shift, self.disLeft, self.disRight, self.speo, self.yawRate, self.accelerationLon, self.accelerationLat = struct.unpack(
            ">qifiifffiffffff", buf.read(64))
        return self

    _decode_one = staticmethod(_decode_one)

    _hash = None

    def _get_hash_recursive(parents):
        if vehicle_status_t in parents: return 0
        tmphash = (0xfcb6ce9ed782f984) & 0xffffffffffffffff
        tmphash = (((tmphash << 1) & 0xffffffffffffffff) + (tmphash >> 63)) & 0xffffffffffffffff
        return tmphash

    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if vehicle_status_t._packed_fingerprint is None:
            vehicle_status_t._packed_fingerprint = struct.pack(">Q", vehicle_status_t._get_hash_recursive([]))
        return vehicle_status_t._packed_fingerprint

    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)


class Odometer_s(object):
    def speed(event, data):
        msg = vehicle_status_t.decode(data)
        auto = msg.nauto
        print(auto)
        global b
        if auto == 1:
            time.sleep(0.25)
            L = float(msg.speLeft)
            R = float(msg.speRight)
            S = (R + L) / 2 / 3.6 * 0.25
            square.append(S)
            print("Auto_Odometer  {:.2f} m".format(sum(square)))
            b = 0
            # print(square)
        else:

            if b == 0:
                file = open('log.txt', 'a', encoding='utf-8')
                file.write('{}  自动驾驶里程 {:.2f} m\n'.format(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()),
                                                          float(sum(square))))
                file.close()
                b = 1
                square.clear()

        # return S

    lc = lcm.LCM()
    subscription = lc.subscribe("VEHICLE_STATUS", speed)
    try:
        while True:
            lc.handle()
    except KeyboardInterrupt:
        pass


Odometer_s.speed()
